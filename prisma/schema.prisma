generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  image       String?
  rating      Float     @default(0)
  description String?
  stock       Int       @default(0)
  inStock     Boolean   @default(true)
  featured    Boolean   @default(false)
  images      ProductImage[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  nameAr      String? // Arabic name for localization
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  isFlashDeal Boolean   @default(false)
  isRecommended Boolean @default(false)
  flashDealEndTime DateTime?
  originalPrice Float?
  archived    Boolean   @default(false)
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  position  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Review {
  id        Int      @id @default(autoincrement())
  author    String
  rating    Int      @default(5)
  comment   String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime  @default(now())
}

/// --------------------------------------------------
///  Authentication & Orders (Tier 0 foundation)
/// --------------------------------------------------

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?   // hashed (nullable for OAuth)
  name      String?
  role      UserRole @default(CUSTOMER)
  orders    Order[]
  cart      Cart?
  wishlist  Wishlist?
  addresses Address[]
  isVerified Boolean @default(false)
  verificationTokens VerificationToken[]
  resetTokens PasswordResetToken[]
  accounts Account[]
  sessions Session[]
  createdAt DateTime @default(now())
}

model Order {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  total     Float
  status    OrderStatus @default(PENDING)
  paymentMethod PaymentMethod @default(COD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  price     Float    // snapshot price
}

// --------------------------------------------------
//  NEW: Persistent Shopping Cart (Tier 2)
// --------------------------------------------------
model Cart {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  price     Float    @default(0)

  @@unique([cartId, productId])
}

// --------------------------------------------------
//  NEW: Wishlist Feature (Tier 5)
// --------------------------------------------------
model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  items     WishlistItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  wishlist  Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  addedAt   DateTime @default(now())

  @@unique([wishlistId, productId])
}

// --------------------------------------------------
//  NEW: User Address Management (Tier 6)
// --------------------------------------------------
model Address {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  type        AddressType @default(HOME)
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String   @default("United States")
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  id Int @id @default(autoincrement())
  token String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  expires DateTime
}

model PasswordResetToken {
  id Int @id @default(autoincrement())
  token String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  expires DateTime
}

// --------------------------------------------------
// NextAuth adapter models for OAuth and sessions
// --------------------------------------------------

model Account {
  id                 Int    @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            Int      @id @default(autoincrement())
  sessionToken  String   @unique
  userId        Int
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  nameAr      String?
  slug        String   @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum PaymentMethod {
  COD
  CREDIT_CARD
  FAWRY
  VODAFONE_CASH
  BANK_TRANSFER
} 